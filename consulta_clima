#!/usr/bin/env python
# coding: utf-8
"""
consulta_tempo
Marlon Soares marlonslbr@gmail.com
2021
"""
#======= imports =======
import argparse,requests,json,os,configparser
#======= constants =======
__VERSION = "1.2"
#======= variables =======
token=""
config_filename=f"{os.environ.get('HOME')}/.clima_tempo"
id_cidade=None
#======= flags =======
verbose = False
#======= objects =======
parser = argparse.ArgumentParser()
config_parser = configparser.ConfigParser()
#======= functions =======
def error(message,code=1):
    print(f"error: {message}")
    if code >=0:
        exit(code)
def lerToken():
	global token
	if not token:
		env_token = os.environ.get("CLIMA_TEMPO_TOKEN")
		if env_token:
			token = env_token
		else:
			if verbose:
				print(f"lendo token do arquivo de configuração {config_filename}")
			if not os.path.exists(config_filename):
				error(f"arquivo de configuração \"{config_filename}\" nçao existe",7)
			config_parser.read(config_filename)
			try:
				if config_parser["api_clima_tempo"]["token"]:
					token = config_parser["api_clima_tempo"]["token"]
				else:
					error("token não foi informado no arquivo de configuração",6)
			except:
				error("ao ler arquivo de configuração")
def lerCidadePadrao():
	global id_cidade
	global verbose
	if config_parser["api_clima_tempo"]["cidade"]:
		id_cidade = config_parser["api_clima_tempo"]["cidade"]
	else:
		if verbose:
			print(f"aviso: não foi possível lêr cidade padrão")
def pesquisarCidade(nome):
	url = f"http://apiadvisor.climatempo.com.br/api/v1/locale/city?name={nome}&token={token}"
	resposta = requests.request("GET",url)
	json_resultado = json.loads(resposta.text)
	if verbose:
		print(json_resultado)
	else:
		if "error" in json_resultado:
			error(json_resultado['detail'],2)
		print("Resultados:")
		for resultado in json_resultado:
			cidade_id = resultado["id"]
			cidade_nome = resultado["name"]
			cidade_estado = resultado["state"]
			print(f"{cidade_nome} [{cidade_estado}] -> {cidade_id}")
def adicionarCidade(id):
	url = f"http://apiadvisor.climatempo.com.br/api-manager/user-token/{token}/locales"
	payload = f"localeId[]={id}"
	headers = { "Content-Type": "application/x-www-form-urlencoded"}
	resposta = requests.request("PUT",url,headers=headers,data=payload)
	json_resultado = json.loads(resposta.text)
	if verbose:
		print(json_resultado)
	else:
		if "error" in json_resultado:
			error(json_resultado["detail"],2)
def obterCidadesRegistradas():
	url = f"http://apiadvisor.climatempo.com.br/api-manager/user-token/{token}/locales"
	resposta = requests.request("GET",url)
	json_resultado = json.loads(resposta.text)
	if verbose:
		print(json_resultado)
	else:
		if "error" in json_resultado:
			error(json_resultado['detail'],2)
			return
		for cidade in json_resultado["locales"]:
			print(f"Cidade ID: {cidade}")
def consultaClima(id):
	url = f"http://apiadvisor.climatempo.com.br/api/v1/weather/locale/{id}/current?token={token}"
	resposta = requests.request("GET",url)
	json_resultado = json.loads(resposta.text)
	if verbose:
		print(resposta.text)
	else:
		if "error" in json_resultado:
			error(json_resultado['detail'],2)
		#cidade_ = json_resultado[""]
		#cidade_ = json_resultado["data"][""]
		cidade_nome = json_resultado["name"]
		cidade_estado = json_resultado["state"]
		cidade_pais = json_resultado["country"]
		cidade_temperatura = json_resultado["data"]["temperature"]
		cidade_velocidade_vento = json_resultado["data"]["wind_velocity"]
		cidade_humidade = json_resultado["data"]["humidity"]
		cidade_condicao = json_resultado["data"]["condition"]
		cidade_sensacao = json_resultado["data"]["sensation"]
		cidade_data = json_resultado["data"]["date"]
		string_tempo = f"{cidade_nome} {cidade_estado} {cidade_pais}\n{cidade_temperatura}ºC (sensação {cidade_sensacao}ºC)\
		\n{cidade_condicao}\nverificado em {cidade_data}"
		print(string_tempo)
def definirCidadePadrao(id):
	config_parser["api_clima_tempo"]["cidade"] = str(id)
	with open(config_filename,"w") as configfile:
		config_parser.write(configfile)
#======= setup argument parser ======= 
#parser.add_argument("","--",help="")
parser.add_argument("-v","--verbose",action="store_true",help="mostrar o retorno das requisições")
parser.add_argument("-i","--id-cidade",type=int,help="informa diretamente o ID da cidade")
parser.add_argument("--pesquisar-cidade",type=str,help="procura ID da cidade pelo nome")
parser.add_argument("--adicionar-cidade",type=int,help="registra a cidade para o token do usuário")
parser.add_argument("--registradas",action="store_true",help="lista as cidades registradas no token do usuário")
parser.add_argument("--clima",action="store_true",help="consulta informações sobre o clima em uma das cidades registradas")
parser.add_argument("--definir-cidade-padrao",type=int,help="salvar o ID da cidade localmente")
args = parser.parse_args()
#======= start execution ======= 
if args.verbose:
	verbose = True
lerToken()
lerCidadePadrao()
if not token:
	error("token not set",5)
if args.id_cidade:
	id_cidade = args.id_cidade
if args.definir_cidade_padrao:
	definirCidadePadrao(args.definir_cidade_padrao)
if args.pesquisar_cidade:
	pesquisarCidade(args.pesquisar_cidade.replace(" ","_"))
if args.adicionar_cidade:
	adicionarCidade(args.adicionar_cidade)
if args.registradas:
	obterCidadesRegistradas()
if args.clima:
	if not id_cidade:
		error("o ID da cidade não foi fornecido")
	consultaClima(id_cidade)
